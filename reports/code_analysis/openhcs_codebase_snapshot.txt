File Path,Classes,Functions,Methods,Total Definitions,Top Names,Top Param Types,Top Return Types
openhcs/microscopes/opera_phenix.py,4,0,16,20,"__init__, get_field_id_mapping, common_dirs, _prepare_workspace, can_parse","str, Union[str, Path], FileManager, Optional[Union[int, str]], int","str, Dict[str, int], List[str], bool, Optional[Dict[str, Any]]"
openhcs/microscopes/microscope_interfaces_base.py,2,0,6,8,"can_parse, parse_filename, construct_filename, find_metadata_file, get_grid_dimensions","str, Union[str, Path], Optional[Union[int, str]], int, Optional[int]","bool, Optional[Dict[str, Any]], str, Path, Tuple[int, int]"
openhcs/microscopes/opera_phenix_xml_parser.py,4,0,13,17,"__init__, _parse_xml, get_plate_info, get_grid_size, get_pixel_size","str, Union[str, Path], Dict[int, Tuple[float, float]], int, Optional[Dict[int, int]]","Optional[str], Dict[str, Any], Tuple[int, int], float, Dict[str, Dict[str, Any]]"
openhcs/microscopes/microscope_base.py,1,2,11,14,"create_microscope_handler, _auto_detect_microscope_type, __init__, common_dirs, post_workspace","Union[str, Path], FileManager, str, int, Path","str, List[str], Optional[Dict[str, Any]], Optional[Path], Tuple[int, int]"
openhcs/microscopes/imagexpress.py,3,0,12,15,"__init__, common_dirs, _prepare_workspace, _flatten_zsteps, can_parse","FileManager, Union[str, Path], Optional[<complex_annotation>], Path, Union[str, Any]","Path, List[str], bool, Optional[Dict[str, Any]], str"
openhcs/microscopes/microscope_interfaces.py,0,2,0,2,"create_microscope_handler, _auto_detect_microscope_type","FileManager, Union[str, Path], str, Optional[str], Path","MicroscopeHandler, str"
openhcs/runtime/napari_stream_visualizer.py,1,0,7,8,"__init__, _initialize_viewer_in_thread, _update_layer_in_thread, start_viewer, _prepare_data_for_display","str, FileManager, np.ndarray, Optional[Dict], Any","Optional[np.ndarray]"
openhcs/constants/clauses.py,1,0,1,2,"__str__","","str"
openhcs/constants/constants.py,6,0,0,6,"","",""
openhcs/core/pipeline/funcstep_contract_validator.py,1,0,6,7,"validate_pipeline, validate_funcstep, validate_function_pattern, _validate_required_args, validate_pattern_structure","str, Any, List[Any], Optional[Dict[str, Any]], FunctionStep","List[Callable], Dict[str, Dict[str, str]], Dict[str, str], Tuple[str, str], <complex_annotation>"
openhcs/core/pipeline/compiler.py,1,0,5,6,"initialize_step_plans_for_context, plan_materialization_flags_for_context, validate_memory_contracts_for_context, assign_gpu_resources_for_context, apply_global_visualizer_override_for_context","ProcessingContext, List[AbstractStep], bool","<complex_annotation>"
openhcs/core/pipeline/step_attribute_stripper.py,1,0,1,2,"strip_step_attributes","List[Any], Dict[str, Dict[str, Any]]","<complex_annotation>"
openhcs/core/pipeline/gpu_memory_validator.py,1,1,1,3,"get_gpu_registry_status, validate_step_plans","Dict[str, Dict[str, Any]]","Dict[str, Dict[str, Any]]"
openhcs/core/pipeline/function_contracts.py,0,5,0,5,"decorator, special_outputs, special_inputs, chain_breaker","F","F, Callable[<complex_annotation>, F]"
openhcs/core/pipeline/pipeline_factories.py,1,0,2,3,"__init__, create_pipelines","bool, Union[str, Path], Optional[Union[str, Path]], Optional[Dict[str, Any]], str","List[Pipeline]"
openhcs/core/pipeline/pipeline.py,0,0,0,0,"","",""
openhcs/core/pipeline/executor.py,1,0,1,2,"execute","Union[List[AbstractStep], List[List[AbstractStep]]], Union[ProcessingContext, List[ProcessingContext]], int, Optional[Any]","Union[ProcessingContext, List[ProcessingContext]]"
openhcs/core/pipeline/pipeline_utils.py,0,2,0,2,"get_core_callable, to_snake_case","Any, str","Optional[Callable[<complex_annotation>, Any]], str"
openhcs/core/pipeline/materialization_flag_planner.py,1,0,1,2,"prepare_pipeline_flags","ProcessingContext, List[AbstractStep]","<complex_annotation>"
openhcs/core/pipeline/path_planner.py,2,0,1,3,"prepare_pipeline_paths","ProcessingContext, List[AbstractStep]","Dict[str, Dict[str, Any]]"
openhcs/core/context/processing_context.py,1,0,9,10,"__init__, __setattr__, inject_plan, freeze, is_frozen","str, GlobalPipelineConfig, Optional[Dict[str, Dict[str, Any]]], Optional[str], Any","<complex_annotation>, bool, Optional[Dict[str, Any]], VFSConfig, PathPlanningConfig"
openhcs/core/config.py,3,1,0,4,"get_default_global_config","","GlobalPipelineConfig"
openhcs/core/memory/converters.py,0,3,0,3,"validate_memory_type, validate_data_compatibility, convert_memory","str, Any, int, bool","<complex_annotation>, Any"
openhcs/core/memory/decorators.py,0,7,0,7,"memory_types, decorator, numpy, cupy, torch","Optional[F], F","Any, Callable[<complex_annotation>, F], F"
openhcs/core/memory/wrapper.py,1,0,13,14,"__init__, memory_type, data, gpu_id, input_memory_type","bool, Any, str, int","<complex_annotation>, str, Any, Optional[int], tuple"
openhcs/core/memory/gpu_utils.py,0,4,0,4,"check_cupy_gpu_available, check_torch_gpu_available, check_tf_gpu_available, check_jax_gpu_available","","Optional[int]"
openhcs/core/memory/stack_utils.py,0,6,0,6,"_is_2d, _is_3d, _detect_memory_type, _enforce_gpu_device_requirements, stack_slices","Any, str, int, bool, List[Any]","bool, str, <complex_annotation>, Any, List[Any]"
openhcs/core/memory/utils.py,0,6,0,6,"_ensure_module, _supports_cuda_array_interface, _supports_dlpack, _get_device_id, _set_device","str, Any, int","Any, bool, Optional[int], <complex_annotation>"
openhcs/core/memory/trackers/tf_tracker.py,1,0,2,3,"__init__, get_free_memory","int","float"
openhcs/core/memory/trackers/cupy_tracker.py,1,0,2,3,"__init__, get_free_memory","int","float"
openhcs/core/memory/trackers/memory_tracker.py,2,0,2,4,"__init__, get_free_memory","int","float"
openhcs/core/memory/trackers/numpy_tracker.py,1,0,4,5,"__init__, get_free_memory, get_numpy_memory_info, create","int","float, Dict[str, float], <complex_annotation>"
openhcs/core/memory/trackers/memory_tracker_registry.py,2,3,4,9,"get_tracker, list_trackers, __init__, list_available_tracker_specs","str, bool, Type","Any, List[str], List[MemoryTrackerSpec]"
openhcs/core/memory/trackers/torch_tracker.py,1,0,2,3,"__init__, get_free_memory","int","float"
openhcs/core/memory/conversion_functions.py,0,24,0,24,"_numpy_to_numpy, _numpy_to_cupy, _numpy_to_torch, _numpy_to_tensorflow, _cupy_to_numpy","Any, Optional[int], bool, int","Any"
openhcs/core/memory/exceptions.py,1,0,1,2,"__init__","str",""
openhcs/core/steps/abstract.py,1,0,4,5,"requires_disk_input, requires_disk_output, __init__, process","<complex_annotation>","bool, <complex_annotation>"
openhcs/core/steps/function_step.py,1,4,4,9,"_is_3d, _execute_function_core, _execute_chain_core, _process_single_pattern_group, requires_disk_input","str, Any, <complex_annotation>, Dict[str, str], TypingOrderedDict[str, str]","bool, Any, <complex_annotation>"
openhcs/core/steps/specialized/focus_step.py,1,0,1,2,"__init__","",""
openhcs/core/steps/specialized/composite_step.py,1,0,1,2,"__init__","",""
openhcs/core/steps/specialized/zflat_step.py,1,0,1,2,"__init__","",""
openhcs/core/steps/specialized/norm_step.py,1,0,1,2,"__init__","",""
openhcs/core/orchestrator/gpu_scheduler.py,0,7,0,7,"initialize_gpu_registry, _detect_available_gpus, acquire_gpu_slot, release_gpu_slot, get_gpu_registry_status","int, Optional[GlobalPipelineConfig]","<complex_annotation>, List[int], Optional[int], Dict[int, Dict[str, int]], bool"
openhcs/core/orchestrator/orchestrator.py,1,0,11,12,"__init__, initialize_workspace, initialize_microscope_handler, initialize, is_initialized","Optional[Union[str, Path]], List[AbstractStep], Optional[List[str]], Optional[NapariStreamVisualizer], Union[str, Path]","<complex_annotation>, bool, ProcessingContext, Dict[str, ProcessingContext], Dict[str, Any]"
openhcs/core/utils.py,0,9,0,9,"optional_import, get_thread_activity, get_active_threads, clear_thread_activity, track_thread_activity","str, Optional[Callable]","Optional[Any], Dict[int, List[Dict[str, Any]]], set"
openhcs/core/exceptions.py,6,0,0,6,"","",""
openhcs/tui/dialogs/global_settings_editor.py,1,0,5,6,"__init__, _build_dialog, _save_settings, _cancel, show","Any, GlobalPipelineConfig","Optional[GlobalPipelineConfig]"
openhcs/tui/dialogs/plate_dialog_manager.py,4,0,25,29,"__call__, __init__, reset, show, hide","str, DialogResultCallback, Any, Optional[str], ErrorCallback","<complex_annotation>, Optional[Any]"
openhcs/tui/components.py,3,0,16,19,"__init__, __pt_container__, _get_display_text, _handle_move_up_click, _handle_move_down_click","bool, Callable[<complex_annotation>, <complex_annotation>], Dict[str, Any], int, Any","Container, str, VSplit, List[Dict], TextArea"
openhcs/tui/file_browser.py,1,3,23,27,"main_async, on_path_selected_cb, on_cancel_cb, __init__, get_initial_focus_target","bool, Callable[<complex_annotation>, Coroutine[Any, Any, <complex_annotation>]], Optional[Union[str, Path]], FileManager, Optional[StorageBackendEnum]","Container, str, Optional[Button], Path, FormattedText"
openhcs/tui/tui_launcher.py,1,0,7,8,"__init__, _handle_global_config_update, _on_plate_added, _on_plate_removed, _on_plate_selected","Dict[str, Any], GlobalPipelineConfig, Optional[str]",""
openhcs/tui/dual_step_func_editor.py,1,0,16,17,"__init__, _func_pattern_changed, _initialize_ui, get_current_view_container, _get_current_view_title","Any, FunctionStep, str, Optional[str]","str, ScrollablePane, Any, Container"
openhcs/tui/__main__.py,0,1,0,1,"main","",""
openhcs/tui/menu_bar.py,8,0,67,75,"_, __init__, create_mouse_handler, __aenter__, __aexit__","KeyPressEvent, str, Dict[str, Any], Union[bool, Condition], <complex_annotation>","<complex_annotation>, bool, Container, Dict[str, Union[Callable, Command]], Dict[str, Condition]"
openhcs/tui/utils.py,0,4,0,4,"show_error_dialog, prompt_for_path_dialog, accept_path, cancel_dialog","str, Optional[Any], Any","Optional[str]"
openhcs/tui/function_pattern_editor.py,2,1,36,39,"get_function_info, __init__, container, _extract_pattern, _clone_pattern","str, int, Any, Union[List, Dict, <complex_annotation>], Optional[Callable]","Union[List, Dict], Container, Tuple[Optional[Callable], Dict[str, Any]], List, Tuple[Optional[Callable], Dict]"
openhcs/tui/services/external_editor_service.py,1,0,4,5,"__init__, edit_pattern_in_external_editor, _validate_pattern_file, _show_error_dialog","str, Any","Tuple[bool, Optional[Union[List, Dict]], Optional[str]], Tuple[bool, Optional[Any], Optional[str]]"
openhcs/tui/services/plate_validation.py,3,0,9,12,"__call__, close, __init__, validate_plate, _validate_plate_directory","Dict[str, Any], str, Optional[str], ProcessingContext, ValidationResultCallback","<complex_annotation>, Dict[str, Any], bool, str"
openhcs/tui/plate_manager_core.py,2,0,47,49,"_, on_plate_added, on_plate_removed, on_plate_selected, on_plate_status_changed","Dict[str, Any], str, int, bool, ProcessingContext","<complex_annotation>, Container, Optional[List[Dict[str, Any]]], List[<complex_annotation>], HSplit"
openhcs/tui/tui_architecture.py,3,0,25,28,"_, __init__, add_observer, notify, set_selected_plate","str, Dict[str, Any], GlobalPipelineConfig, Callable, Any","<complex_annotation>, Container, KeyBindings"
openhcs/tui/commands.py,14,0,27,41,"execute, can_execute","<complex_annotation>","<complex_annotation>, bool"
openhcs/tui/step_viewer.py,1,0,31,32,"_, __init__, create, setup, _get_selected_steps_for_action","int, Dict[str, Any], ProcessingContext, str, bool","str, Container, List[Dict[str, Any]], HSplit, <complex_annotation>"
openhcs/tui/status_bar.py,7,0,32,39,"__init__, from_string, from_logging_level, validate_priority, validate_log_entry","str, Dict[str, Any], Priority, int, Optional[str]","<complex_annotation>, FormattedText, Label"
openhcs/formats/pattern/pattern_discovery.py,2,0,11,13,"__new__, is_fully_instantiated, get_pattern, __init__, path_list_from_pattern","List[str], str, Union[str, Path], FilenameParser, FileManager","List[str], Dict[str, List[Union[str, <complex_annotation>]]], Dict[str, Any], Dict[str, List[Any]], List[<complex_annotation>]"
openhcs/formats/pattern/pattern_resolver.py,4,5,5,14,"auto_detect_patterns, _validate_filename_pattern, _extract_patterns_from_data, _process_pattern_list, convert_filename_pattern","str, Union[str, Path], List[str], bool, FileManager","List[str], Dict[str, Any], List[Union[str, Path]], bool, <complex_annotation>"
openhcs/formats/position_format.py,4,5,3,12,"_parse_standard_csv, _parse_kv_semicolon_csv, _serialize_standard_csv, _serialize_kv_semicolon_csv, get_format_spec","Dict[str, Any], str, List[PositionRecordData], CSVPositionFormat","List[PositionRecordData], str, bool, <complex_annotation>, Dict[str, Any]"
openhcs/formats/func_arg_prep.py,0,2,0,2,"prepare_patterns_and_functions, extract_func_and_args","",""
openhcs/io/filemanager.py,1,0,17,18,"__init__, _get_backend, list_image_files, list_files, find_file_recursive","str, Union[str, Path], bool, Set[str]","bool, List[str], StorageBackend, Union[str, <complex_annotation>], str"
openhcs/io/memory.py,2,0,22,24,"__init__, _resolve_parent, _normalize, load, save","Union[str, Path], str, Any, Optional[Set[str]], bool","<complex_annotation>, bool, str, Any, List[Path]"
openhcs/io/zarr.py,2,0,22,24,"_split_store_and_key, save, load, list_files, is_array","Union[str, Path], str, Any, Optional[str], Optional[Set[str]]","bool, <complex_annotation>, Tuple[Any, str], Any, List[Path]"
openhcs/io/base.py,1,1,15,17,"storage_registry, load, save, list_files, list_dir","Union[str, Path], Any, Optional[str], Optional[Set[str]], bool","<complex_annotation>, bool, Any, List[Path], List[str]"
openhcs/io/exceptions.py,7,0,0,7,"","",""
openhcs/io/disk.py,2,1,22,25,"__init__, optional_import, register, get_writer, get_reader","Union[str, Path], str, Callable, Any, Optional[str]","bool, <complex_annotation>, Callable, Any, List[Union[str, Path]]"
openhcs/validation/validate.py,0,3,0,3,"find_python_files, validate_directory, main","Path, Optional[Set[str]]","List[Path], List[ValidationViolation]"
openhcs/validation/ast_validator.py,6,6,12,24,"__init__, visit_FunctionDef, wrapper, visit_Call, validate_path_types","str, ast.FunctionDef, ast.Call, int, Optional[ast.AST]","<complex_annotation>, str, List[ValidationViolation]"
openhcs/tests/generators/generate_synthetic_data.py,1,0,6,7,"__init__, generate_cell_image, generate_htd_file, generate_opera_phenix_index_xml, _calculate_image_size","",""
openhcs/tests/helpers/unsafe_registry.py,1,0,6,7,"__init__, _is_allowed_context, add_backend, get_backend, clear_backends","str, BackendClass","<complex_annotation>, bool, BackendClass"
openhcs/processing/func_registry.py,0,7,0,7,"initialize_registry, _scan_and_register_functions, _register_function, get_functions_by_memory_type, get_function_info","Callable, str","<complex_annotation>, List[Callable], Dict[str, Any], bool, Set[str]"
openhcs/processing/backends/assemblers/assemble_stack_cupy.py,0,2,0,2,"_create_gaussian_blend_mask, assemble_stack_cupy","float, <complex_annotation>, tuple","<complex_annotation>"
openhcs/processing/backends/assemblers/self_supervised_stitcher.py,2,8,4,14,"__init__, forward, barlow_twins_loss, geometry_consistency_loss, photometric_loss","torch.Tensor, int, torch.device, bool, float","torch.Tensor, List[Tuple[int, int]], List[torch.Tensor], <complex_annotation>"
openhcs/processing/backends/assemblers/assemble_stack_cpu.py,0,2,0,2,"_create_gaussian_blend_mask, assemble_stack_cpu","float, <complex_annotation>, tuple","<complex_annotation>"
openhcs/processing/backends/analysis/rrs_vectorized_tracer.py,0,1,0,1,"trace_neurites_rrs_vectorized","float, int, torch.Tensor","Dict[str, List[Tuple[float, <complex_annotation>]]]"
openhcs/processing/backends/analysis/self_supervised_segmentation_3d.py,2,5,4,11,"__init__, forward, _extract_random_patches, _affine_augment_patch, _nt_xent_loss","torch.Tensor, int, bool, Tuple[int, int, int], float","torch.Tensor, Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]], Tuple[torch.Tensor, torch.Tensor]"
openhcs/processing/backends/analysis/focus_analyzer.py,1,0,9,10,"normalized_variance, laplacian_energy, tenengrad_variance, adaptive_fft_focus, combined_focus_measure","np.ndarray, Union[str, Dict[str, float]], int, float, Optional[Dict[str, float]]","float, Tuple[int, List[Tuple[int, float]]], Tuple[np.ndarray, int, List[Tuple[int, float]]], List[float]"
openhcs/processing/backends/analysis/dxf_mask_pipeline.py,1,4,2,7,"_rasterize_polygons_slice_torch, _apply_displacement_field_torch, _smooth_field_z_torch, dxf_mask_pipeline, __init__","<complex_annotation>, int, List[<complex_annotation>], float, List[List[Tuple[float, float]]]","<complex_annotation>, Union[<complex_annotation>, <complex_annotation>, <complex_annotation>, <complex_annotation>]"
openhcs/processing/backends/analysis/straighten_object_3d.py,0,2,0,2,"_moving_average_1d_torch, straighten_object_3d","torch.Tensor, int","torch.Tensor, Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]"
openhcs/processing/backends/enhance/self_supervised_3d_deconvolution.py,2,1,8,11,"__init__, forward, self_supervised_3d_deconvolution, _gaussian_kernel_3d_torch, _blur_fft_torch","torch.Tensor, Tuple[int, int, int], float, int, Tuple[float, float, float]","torch.Tensor"
openhcs/processing/backends/enhance/focus_torch.py,0,2,0,2,"laplacian, focus_stack_max_sharpness","<complex_annotation>, Optional[int], str, bool","<complex_annotation>"
openhcs/processing/backends/enhance/dl_edof_unsupervised.py,1,6,2,9,"laplacian_filter_torch, extract_patches_2d_from_3d_stack, blend_patches_to_2d_image, sharpness_loss_fn, consistency_loss_fn","int, <complex_annotation>, Optional[int], bool, List[<complex_annotation>]","<complex_annotation>, torch.Tensor"
openhcs/processing/backends/enhance/basic_processor_cupy.py,0,5,0,5,"_validate_cupy_array, _low_rank_approximation, _soft_threshold, basic_flatfield_correction_cupy, basic_flatfield_correction_batch_cupy","<complex_annotation>, Any, str, int, float","<complex_annotation>"
openhcs/processing/backends/enhance/basic_processor_numpy.py,0,5,0,5,"_validate_numpy_array, _low_rank_approximation, _soft_threshold, basic_flatfield_correction_numpy, basic_flatfield_correction_batch_numpy","np.ndarray, Any, str, int, float","np.ndarray, <complex_annotation>"
openhcs/processing/backends/enhance/n2v2_processor_torch.py,5,3,10,18,"__init__, forward, generate_blindspot_mask, extract_random_patches, n2v2_denoise_torch","int, <complex_annotation>, str, bool, Optional[<complex_annotation>]","<complex_annotation>, torch.Tensor"
openhcs/processing/backends/pos_gen/mist_processor_cupy.py,0,4,0,4,"_validate_cupy_array, phase_correlation, extract_patch, mist_compute_tile_positions","int, <complex_annotation>, Any, str","<complex_annotation>, Union[Tuple[float, float], Tuple[<complex_annotation>, Tuple[int, int]]], Tuple[<complex_annotation>, <complex_annotation>]"
openhcs/processing/backends/pos_gen/ashlar_processor_cupy.py,0,3,0,3,"_validate_cupy_array, phase_correlation, gpu_ashlar_align_cupy","<complex_annotation>, int, Any, str","<complex_annotation>, Tuple[float, float], Tuple[<complex_annotation>, <complex_annotation>]"
openhcs/processing/backends/processors/jax_processor.py,0,21,0,21,"create_linear_weight_mask, _validate_3d_array, _gaussian_kernel, _gaussian_blur, sharpen","float, <complex_annotation>, int, str, Any","<complex_annotation>"
openhcs/processing/backends/processors/torch_processor.py,0,14,0,14,"create_linear_weight_mask, _validate_3d_array, _gaussian_blur, sharpen, percentile_normalize","float, <complex_annotation>, int, str, Any","<complex_annotation>"
openhcs/processing/backends/processors/numpy_processor.py,0,13,0,13,"create_linear_weight_mask, _validate_3d_array, sharpen, percentile_normalize, stack_percentile_normalize","float, np.ndarray, int, str, Any","np.ndarray, <complex_annotation>"
openhcs/processing/backends/processors/cupy_processor.py,0,13,0,13,"create_linear_weight_mask, _validate_3d_array, sharpen, percentile_normalize, stack_percentile_normalize","float, <complex_annotation>, int, str, Any","<complex_annotation>"
openhcs/processing/backends/processors/tensorflow_processor.py,0,14,0,14,"create_linear_weight_mask, _validate_3d_array, _gaussian_blur, sharpen, percentile_normalize","float, <complex_annotation>, int, str, Any","<complex_annotation>"
openhcs/processing/registry_base.py,0,4,0,4,"initialize_registry, register_function, get_functions_by_backend, get_function_info","Callable, str, List[str]","<complex_annotation>, List[Callable], Dict[str, Any]"
openhcs/processing/function_registry.py,0,8,0,8,"memory_types, registry_decorator, numpy, cupy, torch","Optional[F], F","Any, Callable[<complex_annotation>, F], F"
openhcs/ez/functions.py,0,1,0,1,"stitch_plate","Union[str, Path], Optional[Union[str, Path]]","Path"
openhcs/ez/core.py,1,0,4,5,"__init__, _create_factory, set_options, stitch","Optional[Union[str, Path, <complex_annotation>]], Union[str, Path, <complex_annotation>], bool, Optional[bool], str",""
openhcs/ez/utils.py,0,3,0,3,"detect_wells, suggest_channel_weights, create_config","Union[str, Path], Union[str, Path, <complex_annotation>]","List[str], Optional[List[float]], Dict[str, Any]"
openhcs/ez/api.py,0,4,0,4,"initialize, create_config, run_pipeline, stitch_images","Optional[Union[str, VirtualPath]], Union[str, VirtualPath], str, bool, int","Dict[str, Any], <complex_annotation>, PipelineConfig"
openhcs/utils/import_utils.py,1,2,2,5,"optional_import, create_placeholder_class, __init__, __getattr__","str, Optional[Any]","Optional[Any], Type, <complex_annotation>, Any"
