User: I want to ensure our codebase follows clean code principles.

AI: I'll help you define clean code principles that we can check for in your codebase. Let's start with some fundamental principles.

Intent: Meaningful Names
Pattern: [a-z][a-z0-9_]{2,30}$
Type: regex
Description: Variables use snake_case and are descriptive
 
Pattern: [A-Z][a-zA-Z0-9]{2,30}$
Type: regex
Description: Classes use PascalCase

Pattern: temp|tmp|foo|bar|x|y|z
Type: string
Description: Using non-descriptive variable names
Is_negative: true

User: I also want to make sure our functions are small and focused.

AI: That's a great principle to enforce. Let's define patterns for small, focused functions.

Intent: Small Functions
Pattern: def\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*:\s*(?:\s*\"\"\"[^\"]*\"\"\"\s*)?(?:[^\n]*\n){1,15}\s*return
Type: regex
Description: Functions with 15 or fewer lines

Pattern: def\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*:\s*(?:\s*\"\"\"[^\"]*\"\"\"\s*)?(?:[^\n]*\n){30,}
Type: regex
Description: Functions with more than 30 lines
Is_negative: true

User: We should also check for proper error handling.

AI: Absolutely. Let's define patterns for proper error handling.

Intent: Error Handling
Pattern: try\s*:\s*\n
Type: regex
Description: Using try blocks for error handling

Pattern: except\s+Exception\s*:
Type: regex
Description: Catching generic exceptions
Is_negative: true

Pattern: except\s+[A-Za-z][A-Za-z0-9_]*Error\s*:
Type: regex
Description: Catching specific exceptions

User: What about comments and documentation?

AI: Good point. Let's define patterns for proper documentation.

Intent: Documentation
Pattern: """
Type: string
Description: Using docstrings

Pattern: def\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*:\s*(?!\s*\"\"\")
Type: regex
Description: Functions without docstrings
Is_negative: true

Pattern: class\s+[A-Z][a-zA-Z0-9_]*\s*(?:\([^)]*\))?\s*:\s*(?!\s*\"\"\")
Type: regex
Description: Classes without docstrings
Is_negative: true
